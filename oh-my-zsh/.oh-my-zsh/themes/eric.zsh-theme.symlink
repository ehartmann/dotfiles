# ------------------------------------------------------------------------
# Juan G. Hurtado oh-my-zsh theme
# (Needs Git plugin for current_branch method)
# ------------------------------------------------------------------------

export TERM="xterm-256color"
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=245"

# Color shortcuts
RED=$fg[red]
YELLOW=$fg[yellow]
GREEN=$fg[green]
WHITE=$fg[white]
BLUE=$fg[blue]
RED_BOLD=$fg_bold[red]
YELLOW_BOLD=$fg_bold[yellow]
GREEN_BOLD=$fg_bold[green]
WHITE_BOLD=$fg_bold[white]
BLUE_BOLD=$fg_bold[blue]
RESET_COLOR=$reset_color

# Format for git_prompt_info()
ZSH_THEME_GIT_PROMPT_PREFIX=""
ZSH_THEME_GIT_PROMPT_SUFFIX=""

# Format for parse_git_dirty()
ZSH_THEME_GIT_PROMPT_DIRTY=" %{$RED%}❢"
ZSH_THEME_GIT_PROMPT_CLEAN=""

# Format for git_prompt_status()
ZSH_THEME_GIT_PROMPT_UNMERGED=" %{$RED%}unmerged"
ZSH_THEME_GIT_PROMPT_DELETED=" %{$RED%}deleted"
ZSH_THEME_GIT_PROMPT_RENAMED=" %{$YELLOW%}renamed"
ZSH_THEME_GIT_PROMPT_MODIFIED=" %{$YELLOW%}modified"
ZSH_THEME_GIT_PROMPT_ADDED=" %{$GREEN%}added"
ZSH_THEME_GIT_PROMPT_UNTRACKED=" %{$WHITE%}untracked"

# Format for git_prompt_ahead()
ZSH_THEME_GIT_PROMPT_AHEAD=" %{$RED%}⚠"

# Format for git_prompt_long_sha() and git_prompt_short_sha()
ZSH_THEME_GIT_PROMPT_SHA_BEFORE=" %{$WHITE%}[%{$YELLOW%}"
ZSH_THEME_GIT_PROMPT_SHA_AFTER="%{$WHITE%}]"

function git_current_branch() {
  ref=$(command git symbolic-ref HEAD 2> /dev/null) || return
  echo ${ref#refs/heads/}
}

function git_current_tag() {
  tag=$(command git describe --exact-match --tags $(command git log -n1 --pretty='%h' 2> /dev/null) 2> /dev/null) || return
  echo " %{$YELLOW%}${tag}"
}

function hg_prompt_info2 {
  if [ $(in_hg) ]; then
    hg prompt --angle-brackets "\
    <%{$fg_bold[blue]%}hg:(%{$fg_bold[red]%}<branch>><:<tags|, >%{$fg_bold[blue]%})>\
    %{$fg[yellow]%}<status|modified|unknown><update>\
    <patches: <patches|join( → )>>%{$reset_color%}<node><incoming changes<incoming>> <outgoing changes<outgoing>> " 2>/dev/null
  fi
}

function jenv_version {
  local version=$($HOME/.jenv/bin/jenv version | sed -e 's/^\(.*\) \s*(set.*)$/\1/')
  echo "(%{$GREEN%}${version}%{$RESET_COLOR%})"
}

function rbenv_version {
  local version=$($HOME/.rbenv/bin/rbenv version | sed -e 's/ (set.*$//')
  echo "(%{$YELLOW%}${version}%{$RESET_COLOR%})"
}

function node_version {
  local version=$(nodejs -v)
  echo "(%{$BLUE%}${version}%{$RESET_COLOR%})"
}

# Prompt format
PROMPT='%* %{$GREEN_BOLD%}%n@%m%{$WHITE%}:%{$BLUE%}%~%u$(parse_git_dirty)$(git_prompt_ahead)%{$RESET_COLOR%} %{$GREEN_BOLD%}$(git_current_branch)$(git_current_tag)$(git_prompt_short_sha)$(git_prompt_status) %{$RESET_COLOR%}
%{$BLUE%}>%{$RESET_COLOR%} '
RPROMPT='$(jenv_version)$(rbenv_version)$(node_version)'

# Fix on Mac OS (http://superuser.com/questions/742171/zsh-z-shell-numpad-numlock-doesnt-work)
# https://github.com/robbyrussell/oh-my-zsh/issues/2654

# Keypad
# 0 . Enter
bindkey -s "^[Op" "0"
bindkey -s "^[Ol" "."
bindkey -s "^[OM" "^M"
# 1 2 3
bindkey -s "^[Oq" "1"
bindkey -s "^[Or" "2"
bindkey -s "^[Os" "3"
# 4 5 6
bindkey -s "^[Ot" "4"
bindkey -s "^[Ou" "5"
bindkey -s "^[Ov" "6"
# 7 8 9
bindkey -s "^[Ow" "7"
bindkey -s "^[Ox" "8"
bindkey -s "^[Oy" "9"
# + -  * /
bindkey -s "^[Ok" "+"
bindkey -s "^[Om" "-"
bindkey -s "^[Oj" "*"
bindkey -s "^[Oo" "/"
